AWSTemplateFormatVersion: '2010-09-09'
Description: 'OrderNimbus - Production Deployment with Custom Domain'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [dev, staging, production]
    Description: Environment name
  
  DomainName:
    Type: String
    Default: ordernimbus.com
    Description: Root domain name
  
  HostedZoneId:
    Type: String
    Default: Z03623712FIVU7Z4CJ949
    Description: Route 53 Hosted Zone ID

Conditions:
  IsProduction: !Equals [!Ref Environment, production]
  CreateDevSubdomain: !Not [!Equals [!Ref Environment, production]]

Resources:
  # ==================== IAM ROLE ====================
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  # ==================== SSL CERTIFICATE ====================
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsProduction
        - !Sub 'app.${DomainName}'
        - !Sub 'app-${Environment}.${DomainName}'
      SubjectAlternativeNames:
        - !If
          - IsProduction
          - !Sub 'www.app.${DomainName}'
          - !Sub 'www.app-${Environment}.${DomainName}'
      DomainValidationOptions:
        - DomainName: !If
            - IsProduction
            - !Sub 'app.${DomainName}'
            - !Sub 'app-${Environment}.${DomainName}'
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub 'ordernimbus-${Environment}-cert'

  # ==================== DYNAMODB TABLE ====================
  MainTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'ordernimbus-${Environment}-main'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE

  # ==================== S3 BUCKET ====================
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'ordernimbus-${Environment}-web-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket.Arn}/*'

  # ==================== CLOUDFRONT DISTRIBUTION ====================
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: SSLCertificate
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Comment: !Sub 'OrderNimbus ${Environment} Distribution'
        DefaultRootObject: index.html
        
        Origins:
          - Id: S3Origin
            DomainName: !Sub '${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
              HTTPSPort: 443
              OriginSSLProtocols: [TLSv1.2]
        
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers: []
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
        
        Aliases:
          - !If
            - IsProduction
            - !Sub 'app.${DomainName}'
            - !Sub 'app-${Environment}.${DomainName}'
        
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        
        PriceClass: PriceClass_100

  # ==================== ROUTE 53 RECORDS ====================
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !If
        - IsProduction
        - !Sub 'app.${DomainName}'
        - !Sub 'app-${Environment}.${DomainName}'
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false

  # Also create www subdomain
  WWWDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !If
        - IsProduction
        - !Sub 'www.app.${DomainName}'
        - !Sub 'www.app-${Environment}.${DomainName}'
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !If
          - IsProduction
          - !Sub 'app.${DomainName}'
          - !Sub 'app-${Environment}.${DomainName}'

  # ==================== API RECORDS ====================
  APIDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !If
        - IsProduction
        - !Sub 'api.${DomainName}'
        - !Sub 'api-${Environment}.${DomainName}'
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Sub '${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'

  # ==================== LAMBDA FUNCTION ====================
  MainLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ordernimbus-${Environment}-main'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ENVIRONMENT: !Ref Environment
          ALLOWED_ORIGINS: !If
            - IsProduction
            - !Sub 'https://app.${DomainName},https://www.app.${DomainName}'
            - !Sub 'https://app-${Environment}.${DomainName},https://www.app-${Environment}.${DomainName}'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Event:', JSON.stringify(event));
            
            // Get allowed origins from environment
            const allowedOrigins = (process.env.ALLOWED_ORIGINS || '').split(',');
            const origin = event.headers?.origin || event.headers?.Origin || '*';
            const allowOrigin = allowedOrigins.includes(origin) ? origin : allowedOrigins[0] || '*';
            
            const corsHeaders = {
              'Access-Control-Allow-Origin': allowOrigin,
              'Access-Control-Allow-Headers': '*',
              'Access-Control-Allow-Methods': '*',
              'Access-Control-Allow-Credentials': 'true',
              'Content-Type': 'application/json'
            };
            
            // Handle OPTIONS for CORS
            if (event.requestContext?.http?.method === 'OPTIONS' || event.httpMethod === 'OPTIONS') {
              return { statusCode: 200, headers: corsHeaders, body: '' };
            }
            
            // Extract path and method
            const path = event.rawPath || event.path || '/';
            const method = event.requestContext?.http?.method || event.httpMethod || 'GET';
            const pathParts = path.split('/').filter(p => p);
            
            // Simple routing
            const resource = pathParts[1]; // api/products -> products
            
            try {
              // Mock data based on resource
              let responseData = {};
              
              switch(resource) {
                case 'products':
                  responseData = {
                    products: [
                      { id: '1', name: 'Product 1', price: 99.99, inventory: 100 },
                      { id: '2', name: 'Product 2', price: 149.99, inventory: 50 }
                    ],
                    count: 2
                  };
                  break;
                  
                case 'orders':
                  responseData = {
                    orders: [
                      { id: '1', customerName: 'John Doe', total: 299.99, status: 'completed' },
                      { id: '2', customerName: 'Jane Smith', total: 149.99, status: 'pending' }
                    ],
                    count: 2
                  };
                  break;
                  
                case 'inventory':
                  responseData = {
                    inventory: [
                      { productId: '1', quantity: 100, location: 'Warehouse A' },
                      { productId: '2', quantity: 50, location: 'Warehouse B' }
                    ],
                    count: 2
                  };
                  break;
                  
                case 'customers':
                  responseData = {
                    customers: [
                      { id: '1', name: 'John Doe', email: 'john@example.com', orders: 5 },
                      { id: '2', name: 'Jane Smith', email: 'jane@example.com', orders: 3 }
                    ],
                    count: 2
                  };
                  break;
                  
                case 'notifications':
                  responseData = {
                    notifications: [
                      { id: '1', type: 'info', message: 'System update completed' },
                      { id: '2', type: 'warning', message: 'Low inventory alert' }
                    ],
                    count: 2
                  };
                  break;
                  
                case 'stores':
                  responseData = {
                    stores: [
                      { id: '1', name: 'Main Store', domain: 'main.myshopify.com' },
                      { id: '2', name: 'Secondary Store', domain: 'secondary.myshopify.com' }
                    ],
                    count: 2
                  };
                  break;
                  
                case 'health':
                  responseData = {
                    status: 'healthy',
                    environment: process.env.ENVIRONMENT,
                    timestamp: new Date().toISOString()
                  };
                  break;
                  
                default:
                  responseData = {
                    message: 'OrderNimbus API',
                    version: '1.0',
                    environment: process.env.ENVIRONMENT,
                    path: path,
                    method: method
                  };
              }
              
              return {
                statusCode: 200,
                headers: corsHeaders,
                body: JSON.stringify(responseData)
              };
              
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                headers: corsHeaders,
                body: JSON.stringify({ error: 'Internal server error' })
              };
            }
          };

  # ==================== API GATEWAY ====================
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'ordernimbus-${Environment}-api'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: 
          - !If
            - IsProduction
            - !Sub 'https://app.${DomainName}'
            - !Sub 'https://app-${Environment}.${DomainName}'
          - !If
            - IsProduction
            - !Sub 'https://www.app.${DomainName}'
            - !Sub 'https://www.app-${Environment}.${DomainName}'
        AllowHeaders: ['*']
        AllowMethods: ['*']
        AllowCredentials: true
        MaxAge: 86400

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: !Ref Environment
      AutoDeploy: true

  # Lambda Permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MainLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # Lambda Integration
  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${MainLambda}'
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'

  # API Routes
  CatchAllRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: '$default'
      Target: !Sub 'integrations/${LambdaIntegration}'

  HealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /api/health'
      Target: !Sub 'integrations/${LambdaIntegration}'

Outputs:
  AppURL:
    Description: Application URL
    Value: !If
      - IsProduction
      - !Sub 'https://app.${DomainName}'
      - !Sub 'https://app-${Environment}.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-AppURL'

  ApiURL:
    Description: API URL
    Value: !If
      - IsProduction
      - !Sub 'https://api.${DomainName}/${Environment}'
      - !Sub 'https://api-${Environment}.${DomainName}/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiURL'

  ApiGatewayEndpoint:
    Description: API Gateway Direct Endpoint
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayEndpoint'

  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  S3BucketName:
    Description: S3 Bucket for frontend hosting
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'

  DNSRecords:
    Description: DNS Records Created
    Value: !Sub 'app.${DomainName}, api.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSRecords'